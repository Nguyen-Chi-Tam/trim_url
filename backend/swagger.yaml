openapi: 3.0.0
info:
  title: URL Shortener API
  version: 1.0.0
  description: API for a URL shortening service, with endpoints for a custom authentication server and for direct interaction with the Supabase REST API.

servers:
  # Added a placeholder for your custom server for auth/redirects
  - url: http://localhost:5000
    description: Custom Backend Server
  - url: https://ruvgkxrldmguhwvdbgrf.supabase.co/rest/v1
    description: Supabase Server

components:
  securitySchemes:
    # New scheme for the Supabase API Key
    supabaseKey:
      type: apiKey
      in: header
      name: apikey
    # Kept bearerAuth for your custom server endpoints
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Schemas remain unchanged as they model the data correctly
    users:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    bio_page:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        title:
          type: string
        url:
          type: string
        description:
          type: string
        profile_pic:
          type: string
        background:
          type: string
        created_at:
          type: string
          format: date-time
    bio_urls:
      type: object
      properties:
        id:
          type: string
        bio_id:
          type: string
        url_id:
          type: string
        created_at:
          type: string
          format: date-time
    urls:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        original_url:
          type: string
        short_url:
          type: string
        custom_url:
          type: string
        title:
          type: string
        qr_code:
          type: string
        is_temporary:
          type: boolean
        expiration_time:
          type: string
          format: date-time
        profile_pic:
          type: string
        created_at:
          type: string
          format: date-time
    clicks:
      type: object
      properties:
        id:
          type: string
        url_id:
          type: string
        created_at:
          type: string
          format: date-time
        city:
          type: string
          nullable: true
        device:
          type: string
        country:
          type: string
          nullable: true
    Error:
      type: object
      properties:
        error:
          type: string

paths:
  # --- Custom Server Endpoints (Auth, Redirects) ---
  
  /api/auth/signup:
    # This endpoint belongs to your custom server, so it remains unchanged.
    summary: Sign up a new user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 6
    responses:
      '201':
        description: User created successfully
      '400':
        description: Bad request

  /api/auth/login:
    # This endpoint belongs to your custom server, so it remains unchanged.
    summary: Log in a user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
                format: email
              password:
                type: string
    responses:
      '200':
        description: Login successful
      '400':
        description: Bad request
  
  /{shortUrl}:
    # This redirect endpoint likely belongs to your custom server.
    summary: Redirect to original URL
    parameters:
      - name: shortUrl
        in: path
        required: true
        schema:
          type: string
    responses:
      '302':
        description: Redirect to original URL
      '404':
        description: URL not found

  # --- Supabase Direct Table Access Endpoints ---

  /bio_page:
    get:
      summary: Get bio pages (direct Supabase query)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          # CHANGED: More explicit instructions
          description: "**IMPORTANT:** You must include the 'eq.' prefix. To find ID 9, you must enter 'eq.9'."
          required: false # Making it optional so the user can fetch all pages
          schema:
            type: string
            # CHANGED: A clear example of the required format
            example: "eq.9"
        - name: select
          in: query
          description: 'Fields to return. Use * for all fields.'
          schema:
            type: string
            example: "*"
      responses:
        '200':
          description: A list of bio pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bio_page'
    post:
      summary: Create a new bio page (direct Supabase insert)
      security:
        - supabaseKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # The request body should be a single bio_page object
              $ref: '#/components/schemas/bio_page'
      responses:
        '201':
          description: Bio page created
        '400':
          description: Bad request

    patch:
      # REWRITTEN: Changed PUT to PATCH, which is used for Supabase updates.
      summary: Update a bio page (direct Supabase update)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the page to update. Example: `eq.9`'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bio_page'
      responses:
        '200':
          description: Bio page updated
        '404':
          description: Bio page not found

    delete:
      summary: Delete a bio page (direct Supabase delete)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the page to delete. Example: `eq.9`'
          schema:
            type: string
      responses:
        '204':
          description: Bio page successfully deleted (No Content)
        '404':
          description: Bio page not found

  /bio_urls:
    get:
      summary: Get bio URLs (direct Supabase query)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          description: "**IMPORTANT:** You must include the 'eq.' prefix. To find ID 9, you must enter 'eq.9'."
          required: false
          schema:
            type: string
            example: "eq.9"
        - name: bio_id
          in: query
          description: "Filter by bio page ID. Use 'eq.' prefix, e.g., 'eq.9' to get all bio URLs for bio page ID 9."
          required: false
          schema:
            type: string
            example: "eq.9"
        - name: select
          in: query
          description: 'Fields to return. Use * for all fields.'
          schema:
            type: string
            example: "*"
      responses:
        '200':
          description: A list of bio URLs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bio_urls'
    post:
      summary: Create a new bio URL (direct Supabase insert)
      security:
        - supabaseKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bio_urls'
      responses:
        '201':
          description: Bio URL created
        '400':
          description: Bad request

    patch:
      summary: Update a bio URL (direct Supabase update)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the bio URL to update. Example: `eq.9`'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bio_urls'
      responses:
        '200':
          description: Bio URL updated
        '404':
          description: Bio URL not found

    delete:
      summary: Delete a bio URL (direct Supabase delete)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the bio URL to delete. Example: `eq.9`'
          schema:
            type: string
      responses:
        '204':
          description: Bio URL successfully deleted (No Content)
        '404':
          description: Bio URL not found

  /urls:
    get:
      summary: Get URLs (direct Supabase query)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          description: "**IMPORTANT:** You must include the 'eq.' prefix. To find ID 9, you must enter 'eq.9'."
          required: false
          schema:
            type: string
            example: "eq.9"
        - name: select
          in: query
          description: 'Fields to return. Use * for all fields.'
          schema:
            type: string
            example: "*"
      responses:
        '200':
          description: A list of URLs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/urls'
    post:
      summary: Create a new URL (direct Supabase insert)
      security:
        - supabaseKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/urls'
      responses:
        '201':
          description: URL created
        '400':
          description: Bad request

    patch:
      summary: Update a URL (direct Supabase update)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the URL to update. Example: `eq.9`'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/urls'
      responses:
        '200':
          description: URL updated
        '404':
          description: URL not found

    delete:
      summary: Delete a URL (direct Supabase delete)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the URL to delete. Example: `eq.9`'
          schema:
            type: string
      responses:
        '204':
          description: URL successfully deleted (No Content)
        '404':
          description: URL not found

  /clicks:
    get:
      summary: Get clicks (direct Supabase query)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          description: "**IMPORTANT:** You must include the 'eq.' prefix. To find ID 9, you must enter 'eq.9'."
          required: false
          schema:
            type: string
            example: "eq.9"
        - name: url_id
          in: query
          description: "Filter by URL ID. Use 'eq.' prefix, e.g., 'eq.9' to get all clicks for URL ID 9."
          required: false
          schema:
            type: string
            example: "eq.9"
        - name: select
          in: query
          description: 'Fields to return. Use * for all fields.'
          schema:
            type: string
            example: "*"
      responses:
        '200':
          description: A list of clicks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clicks'
    post:
      summary: Create a new click (direct Supabase insert)
      security:
        - supabaseKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clicks'
      responses:
        '201':
          description: Click created
        '400':
          description: Bad request

    patch:
      summary: Update a click (direct Supabase update)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the click to update. Example: `eq.9`'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clicks'
      responses:
        '200':
          description: Click updated
        '404':
          description: Click not found

    delete:
      summary: Delete a click (direct Supabase delete)
      security:
        - supabaseKey: []
      parameters:
        - name: id
          in: query
          required: true
          description: 'The ID of the click to delete. Example: `eq.9`'
          schema:
            type: string
      responses:
        '204':
          description: Click successfully deleted (No Content)
        '404':
          description: Click not found
